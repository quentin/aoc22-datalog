.include "day02.dl"

/// Holds if the decrypte guide contains the triplet `round`, `opponent_shape`, `response_shape`.
.decl guide(round:number, opponent_shape:Shape, response_shape:Shape)
guide(round, o, r) :-
  encrypted(round, o0, r0),
  decrypt_shape(o0, o),
  decrypt_shape(r0, r).

/// Holds if playing `round` according to the guide grants `score`.
.decl round_score(round:number, score:number)
round_score(round, sscore + oscore) :-
  guide(round, os, rs),
  shape_score(rs, sscore),
  outcome(os, rs, oscore).

/// Holds if playing all rounds according to the guide grants the `total_score`
.decl answer(total_score:number)
.output answer()
answer(total_score) :-
  total_score = sum s : round_score(_, s).
